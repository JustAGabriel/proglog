// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/log.proto

package log_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Log_Create_FullMethodName       = "/log.v1.Log/Create"
	Log_CreateStream_FullMethodName = "/log.v1.Log/CreateStream"
	Log_Get_FullMethodName          = "/log.v1.Log/Get"
	Log_GetStream_FullMethodName    = "/log.v1.Log/GetStream"
	Log_GetServers_FullMethodName   = "/log.v1.Log/GetServers"
)

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	Create(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	CreateStream(ctx context.Context, opts ...grpc.CallOption) (Log_CreateStreamClient, error)
	Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GetStream(ctx context.Context, opts ...grpc.CallOption) (Log_GetStreamClient, error)
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) Create(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, Log_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) CreateStream(ctx context.Context, opts ...grpc.CallOption) (Log_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[0], Log_CreateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logCreateStreamClient{stream}
	return x, nil
}

type Log_CreateStreamClient interface {
	Send(*CreateRecordRequest) error
	Recv() (*CreateRecordResponse, error)
	grpc.ClientStream
}

type logCreateStreamClient struct {
	grpc.ClientStream
}

func (x *logCreateStreamClient) Send(m *CreateRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logCreateStreamClient) Recv() (*CreateRecordResponse, error) {
	m := new(CreateRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, Log_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (Log_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[1], Log_GetStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logGetStreamClient{stream}
	return x, nil
}

type Log_GetStreamClient interface {
	Send(*GetRecordRequest) error
	Recv() (*GetRecordResponse, error)
	grpc.ClientStream
}

type logGetStreamClient struct {
	grpc.ClientStream
}

func (x *logGetStreamClient) Send(m *GetRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logGetStreamClient) Recv() (*GetRecordResponse, error) {
	m := new(GetRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, Log_GetServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	Create(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	CreateStream(Log_CreateStreamServer) error
	Get(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	GetStream(Log_GetStreamServer) error
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) Create(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogServer) CreateStream(Log_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedLogServer) Get(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLogServer) GetStream(Log_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedLogServer) GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Create(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).CreateStream(&logCreateStreamServer{stream})
}

type Log_CreateStreamServer interface {
	Send(*CreateRecordResponse) error
	Recv() (*CreateRecordRequest, error)
	grpc.ServerStream
}

type logCreateStreamServer struct {
	grpc.ServerStream
}

func (x *logCreateStreamServer) Send(m *CreateRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logCreateStreamServer) Recv() (*CreateRecordRequest, error) {
	m := new(CreateRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Log_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Get(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).GetStream(&logGetStreamServer{stream})
}

type Log_GetStreamServer interface {
	Send(*GetRecordResponse) error
	Recv() (*GetRecordRequest, error)
	grpc.ServerStream
}

type logGetStreamServer struct {
	grpc.ServerStream
}

func (x *logGetStreamServer) Send(m *GetRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logGetStreamServer) Recv() (*GetRecordRequest, error) {
	m := new(GetRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Log_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_GetServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Log_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Log_Get_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _Log_GetServers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _Log_CreateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _Log_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/log.proto",
}
